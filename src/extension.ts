'use strict';
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as os from 'os';
import * as path from 'path'
import * as jsonc from 'jsonc-parser';
import pify = require('pify');

const MODULE_NAME = 'Save As Snippet'

function getVscodeSettingsPath(): string {
    const osName = os.type();
    if (osName === 'Darwin') {
        if (process.env.HOME) {
            return path.join(process.env.HOME, 'Library', 'Application Support', 'Code', 'User')
        }
    } 
    
    if (osName === 'Linux') {
        if (process.env.HOME) {
            return path.join(process.env.HOME, '.config', 'Code', 'User')
        }

    }
    
    if (osName === 'Windows_NT') {
        if (process.env.APPDATA) {
            return path.join(process.env.APPDATA, 'Code', 'User')
        }
    } 

    throw new Error('Cannot detect user settings folder')
}

function getSnippetFilepath(): string {
    return path.join(getVscodeSettingsPath(), 'snippets', 'save-as-snippet.code-snippets');
}

function showEditor(filepath: string) {
    vscode.workspace.openTextDocument(filepath)
        .then(doc => vscode.window.showTextDocument(doc))
}

interface Snippet {
    name?: string,
    scope?: string[] | string,
    prefix?: string,
    body: string[],
    description?: string,
}

function parseSnippetBody(block: string): string[] {
    return block.split('\n');
}

function fileExists(filepath: string): Promise<any> {
    if (fs.access) {
        return pify(fs.access)(filepath)   
    }

    return pify(fs.exists)(filepath)
}

const EMPTY_JSON = `// This file is generated by Save As Snippet
// For detail, check vscode snippet syntax 
// https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets
{}`
function writeEmptyJson(filepath: string): Promise<any> {
    return pify(fs.writeFile)(filepath, EMPTY_JSON);
}

function appendSnippet(filepath: string, {
    name: _name = '',
    scope,
    prefix = '',
    body,
    description = '',
}: Snippet) {
    return fileExists(filepath)
        .catch(error => {
            if (error.code === 'ENOENT') {
                return writeEmptyJson(filepath)
            }

            else throw error;
        })
        .then(() => pify(fs.readFile)(filepath))
        .then(data => {
            const raw = data.toString()
            
            let name = _name;
            
            const dumped = jsonc.applyEdits(
                raw,
                jsonc.modify(raw, [name], {
                    prefix,
                    scope: Array.isArray(scope) ? scope.join(',') : scope,
                    body,
                    description,
                }, 
                {
                    formattingOptions: {
                        tabSize: 2,
                        insertSpaces: true,
                    }
                })
            )

            return dumped
        })
        .then(dumpped => pify(fs.writeFile)(filepath, dumpped))
}

function info(message: string) {
    vscode.window.showInformationMessage(`${MODULE_NAME}: ${message}`);
}

function warn(message: string) {
    vscode.window.showWarningMessage(`${MODULE_NAME}: ${message}`);
}

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

    // The command has been defined in the package.json file
    // Now provide the implementation of the command with  registerCommand
    // The commandId parameter must match the command field in package.json
    let disposable = vscode.commands.registerCommand('save-as-snippet.saveAsSnippet', () => {
        // The code you place here will be executed every time your command is executed

        // select active text editor
        const activeTextEditor = vscode.window.activeTextEditor
        if (!activeTextEditor) {
            return;
        }
    
        // scope is docuemnt language.
        let scope = [];
        const languageId = activeTextEditor.document.languageId;
        if (languageId) {
            scope.push(languageId)
        }

        // get snippet body
        const selection = activeTextEditor.selection;
        const textBlock = activeTextEditor.document.getText(new vscode.Range(selection.start, selection.end))
        if (textBlock.length < 1) {
            warn('Select code blocks');
            return;
        }

        const body = parseSnippetBody(textBlock);

    
        // snippet filepath
        let filepath: string = '';

        try {
            filepath = getSnippetFilepath();
        } catch (error) {
            warn('Unknown OS or ENV. Great pleasure for issue')
            return;
        }

        // append new snippet and open the snippet file
        return appendSnippet(filepath, {
            scope,
            body,
        })
        .then(() => showEditor(filepath))
        .then(() => info('Snippet Saved'))
    });

    context.subscriptions.push(disposable);
}

// this method is called when your extension is deactivated
export function deactivate() {
}