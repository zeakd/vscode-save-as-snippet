'use strict';
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import * as fs from 'fs/promises';
import * as os from 'os';
import * as path from 'path';
import * as jsonc from 'jsonc-parser';

const MODULE_NAME = 'Save As Snippet';

function getVscodeSettingsPath(): string {
  const osName = os.type();
  if (osName === 'Darwin') {
    if (process.env.HOME) {
      return path.join(process.env.HOME, 'Library', 'Application Support', 'Code', 'User');
    }
  } 
    
  if (osName === 'Linux') {
    if (process.env.HOME) {
      return path.join(process.env.HOME, '.config', 'Code', 'User');
    }

  }
    
  if (osName === 'Windows_NT') {
    if (process.env.APPDATA) {
      return path.join(process.env.APPDATA, 'Code', 'User');
    }
  } 

  throw new Error('Cannot detect user settings folder');
}

function getSnippetFilepath(): string {
  return path.join(getVscodeSettingsPath(), 'snippets', 'save-as-snippet.code-snippets');
}

async function showEditor(filepath: string) {
  const doc = await vscode.workspace.openTextDocument(filepath);
  vscode.window.showTextDocument(doc);
}

interface Snippet {
  name?: string,
  scope?: string[] | string,
  prefix?: string,
  body: string[],
  description?: string,
}

function parseSnippetBody(block: string): string[] {
  return block.split('\n');
}

const EMPTY_JSON = `// This file is generated by Save As Snippet
// For detail, check vscode snippet syntax 
// https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets
{}`;

function writeEmptyJson(filepath: string): Promise<any> {
  return fs.writeFile(filepath, EMPTY_JSON);
}

async function appendSnippetToFile(filepath: string, {
  name: _name = '',
  scope,
  prefix = '',
  body,
  description = '',
}: Snippet) {
  try {
    await fs.access(filepath);
  } catch (error: any) {
    console.log('error!!!', error, error.code);

    if (error.code === 'ENOENT') {
      await writeEmptyJson(filepath);
    } else {
      throw error;
    }
  }

  const data = await fs.readFile(filepath);

  const raw = data.toString();
          
  let name = _name;
          
  const dumpped = jsonc.applyEdits(
    raw,
    jsonc.modify(raw, [name], {
      prefix,
      scope: Array.isArray(scope) ? scope.join(',') : scope,
      body,
      description,
    }, 
    {
      formattingOptions: {
        tabSize: 2,
        insertSpaces: true,
      }
    })
  );

  await fs.writeFile(filepath, dumpped);
}

async function appendSnippet(text: string, {
  name: _name = '',
  scope,
  prefix = '',
  body,
  description = '',
}: Snippet) {        
  let name = _name;
          
  return jsonc.applyEdits(
    text,
    jsonc.modify(text, [name], {
      prefix,
      scope: Array.isArray(scope) ? scope.join(',') : scope,
      body,
      description,
    }, 
    {
      formattingOptions: {
        tabSize: 2,
        insertSpaces: true,
      }
    })
  );
}

function info(message: string) {
  vscode.window.showInformationMessage(`${MODULE_NAME}: ${message}`);
}

function warn(message: string) {
  vscode.window.showWarningMessage(`${MODULE_NAME}: ${message}`);
}

async function commandOpenSnippets() {
  await vscode.commands.executeCommand('workbench.action.openSnippets');
}

async function commandSaveSnippet() {
  // select active text editor
  const activeTextEditor = vscode.window.activeTextEditor;
  if (!activeTextEditor) {
    return;
  }
  
  // scope is document language.
  let scope = [];
  const languageId = activeTextEditor.document.languageId;
  if (languageId) {
    scope.push(languageId);
  }

  // get snippet body
  const selection = activeTextEditor.selection;
  const textBlock = activeTextEditor.document.getText(new vscode.Range(selection.start, selection.end));
  if (textBlock.length < 1) {
    warn('Select code blocks');
    return;
  }

  const body = parseSnippetBody(textBlock);

  // use builtin command
  await vscode.commands.executeCommand('workbench.action.openSnippets');  
  
  // from here, active text editor is change to snippet file.
  if (!vscode.window.activeTextEditor || !/\.code-snippets$/.test(vscode.window.activeTextEditor.document.fileName)) {
    warn('.code-snippets file is not selected.');
    return;
  }

  const snippetsEditor = vscode.window.activeTextEditor;
  const snippetsEditorContent = snippetsEditor.document.getText();

  const lastline = snippetsEditor.document.lineCount;

  const updatedContent = await appendSnippet(snippetsEditorContent, {
    scope,
    body,
  });

  await snippetsEditor.edit(builder => {
    builder.replace(new vscode.Range(0, 0, snippetsEditor.document.lineCount, 0), updatedContent);
  });

  snippetsEditor.selection = new vscode.Selection(
    new vscode.Position(lastline - 1, 3), // this position is snippet name
    new vscode.Position(lastline - 1, 3)
  );

  snippetsEditor.revealRange(new vscode.Range(
    new vscode.Position(lastline - 3, 1), 
    new vscode.Position(lastline - 1, 1)
  ));

  info('Snippet Created');
}

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

  context.subscriptions.push(vscode.commands.registerCommand('save-as-snippet.openSnippets', commandOpenSnippets));
  context.subscriptions.push(vscode.commands.registerCommand('save-as-snippet.saveSnippet', commandSaveSnippet));
}

// this method is called when your extension is deactivated
export function deactivate() {
}